/**
 * Copyright (c) 2015-2017 Obeo, Inria
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 	
 * Contributors:
 * - William Piers <william.piers@obeo.fr>
 * - Philippe Merle <philippe.merle@inria.fr>
 * - Faiez Zalila <faiez.zalila@inria.fr>
 */
package cloudmonitoring.provider;

import cloudmonitoring.util.CloudmonitoringAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CloudmonitoringItemProviderAdapterFactory extends CloudmonitoringAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CloudmonitoringItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudmonitoring.Cpu} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CpuItemProvider cpuItemProvider;

	/**
	 * This creates an adapter for a {@link cloudmonitoring.Cpu}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCpuAdapter() {
		if (cpuItemProvider == null) {
			cpuItemProvider = new CpuItemProvider(this);
		}

		return cpuItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudmonitoring.Diskio} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiskioItemProvider diskioItemProvider;

	/**
	 * This creates an adapter for a {@link cloudmonitoring.Diskio}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiskioAdapter() {
		if (diskioItemProvider == null) {
			diskioItemProvider = new DiskioItemProvider(this);
		}

		return diskioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudmonitoring.Ram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RamItemProvider ramItemProvider;

	/**
	 * This creates an adapter for a {@link cloudmonitoring.Ram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRamAdapter() {
		if (ramItemProvider == null) {
			ramItemProvider = new RamItemProvider(this);
		}

		return ramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudmonitoring.Networkio} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkioItemProvider networkioItemProvider;

	/**
	 * This creates an adapter for a {@link cloudmonitoring.Networkio}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkioAdapter() {
		if (networkioItemProvider == null) {
			networkioItemProvider = new NetworkioItemProvider(this);
		}

		return networkioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudmonitoring.Inputoutput} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputoutputItemProvider inputoutputItemProvider;

	/**
	 * This creates an adapter for a {@link cloudmonitoring.Inputoutput}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputoutputAdapter() {
		if (inputoutputItemProvider == null) {
			inputoutputItemProvider = new InputoutputItemProvider(this);
		}

		return inputoutputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudmonitoring.Sensorcontrol} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorcontrolItemProvider sensorcontrolItemProvider;

	/**
	 * This creates an adapter for a {@link cloudmonitoring.Sensorcontrol}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorcontrolAdapter() {
		if (sensorcontrolItemProvider == null) {
			sensorcontrolItemProvider = new SensorcontrolItemProvider(this);
		}

		return sensorcontrolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudmonitoring.Emfpublisher} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmfpublisherItemProvider emfpublisherItemProvider;

	/**
	 * This creates an adapter for a {@link cloudmonitoring.Emfpublisher}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmfpublisherAdapter() {
		if (emfpublisherItemProvider == null) {
			emfpublisherItemProvider = new EmfpublisherItemProvider(this);
		}

		return emfpublisherItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudmonitoring.Systemoutpublisher} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemoutpublisherItemProvider systemoutpublisherItemProvider;

	/**
	 * This creates an adapter for a {@link cloudmonitoring.Systemoutpublisher}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemoutpublisherAdapter() {
		if (systemoutpublisherItemProvider == null) {
			systemoutpublisherItemProvider = new SystemoutpublisherItemProvider(this);
		}

		return systemoutpublisherItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudmonitoring.Publishercontrol} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PublishercontrolItemProvider publishercontrolItemProvider;

	/**
	 * This creates an adapter for a {@link cloudmonitoring.Publishercontrol}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPublishercontrolAdapter() {
		if (publishercontrolItemProvider == null) {
			publishercontrolItemProvider = new PublishercontrolItemProvider(this);
		}

		return publishercontrolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudmonitoring.Disk} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiskItemProvider diskItemProvider;

	/**
	 * This creates an adapter for a {@link cloudmonitoring.Disk}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiskAdapter() {
		if (diskItemProvider == null) {
			diskItemProvider = new DiskItemProvider(this);
		}

		return diskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudmonitoring.Mailpublisher} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MailpublisherItemProvider mailpublisherItemProvider;

	/**
	 * This creates an adapter for a {@link cloudmonitoring.Mailpublisher}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMailpublisherAdapter() {
		if (mailpublisherItemProvider == null) {
			mailpublisherItemProvider = new MailpublisherItemProvider(this);
		}

		return mailpublisherItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudmonitoring.Mainmetric} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MainmetricItemProvider mainmetricItemProvider;

	/**
	 * This creates an adapter for a {@link cloudmonitoring.Mainmetric}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMainmetricAdapter() {
		if (mainmetricItemProvider == null) {
			mainmetricItemProvider = new MainmetricItemProvider(this);
		}

		return mainmetricItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cloudmonitoring.Supervisorapiconnect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SupervisorapiconnectItemProvider supervisorapiconnectItemProvider;

	/**
	 * This creates an adapter for a {@link cloudmonitoring.Supervisorapiconnect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSupervisorapiconnectAdapter() {
		if (supervisorapiconnectItemProvider == null) {
			supervisorapiconnectItemProvider = new SupervisorapiconnectItemProvider(this);
		}

		return supervisorapiconnectItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (cpuItemProvider != null) cpuItemProvider.dispose();
		if (diskioItemProvider != null) diskioItemProvider.dispose();
		if (ramItemProvider != null) ramItemProvider.dispose();
		if (networkioItemProvider != null) networkioItemProvider.dispose();
		if (inputoutputItemProvider != null) inputoutputItemProvider.dispose();
		if (sensorcontrolItemProvider != null) sensorcontrolItemProvider.dispose();
		if (emfpublisherItemProvider != null) emfpublisherItemProvider.dispose();
		if (systemoutpublisherItemProvider != null) systemoutpublisherItemProvider.dispose();
		if (publishercontrolItemProvider != null) publishercontrolItemProvider.dispose();
		if (diskItemProvider != null) diskItemProvider.dispose();
		if (mailpublisherItemProvider != null) mailpublisherItemProvider.dispose();
		if (mainmetricItemProvider != null) mainmetricItemProvider.dispose();
		if (supervisorapiconnectItemProvider != null) supervisorapiconnectItemProvider.dispose();
	}

}
