/**
 * Copyright (c) 2015-2017 Obeo, Inria
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 	
 * Contributors:
 * - William Piers <william.piers@obeo.fr>
 * - Philippe Merle <philippe.merle@inria.fr>
 * - Faiez Zalila <faiez.zalila@inria.fr>
 */
package org.eclipse.cmf.occi.multicloud.horizontalelasticity.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.cmf.occi.multicloud.horizontalelasticity.util.HorizontalelasticityAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class HorizontalelasticityItemProviderAdapterFactory extends HorizontalelasticityAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public HorizontalelasticityItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.RecurrenceStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RecurrenceStepItemProvider recurrenceStepItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.RecurrenceStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRecurrenceStepAdapter() {
		if (recurrenceStepItemProvider == null) {
			recurrenceStepItemProvider = new RecurrenceStepItemProvider(this);
		}

		return recurrenceStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Array} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayItemProvider arrayItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Array}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrayAdapter() {
		if (arrayItemProvider == null) {
			arrayItemProvider = new ArrayItemProvider(this);
		}

		return arrayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.ArrofRecStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrofRecStepItemProvider arrofRecStepItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.ArrofRecStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrofRecStepAdapter() {
		if (arrofRecStepItemProvider == null) {
			arrofRecStepItemProvider = new ArrofRecStepItemProvider(this);
		}

		return arrofRecStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Horizontalgroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HorizontalgroupItemProvider horizontalgroupItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Horizontalgroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHorizontalgroupAdapter() {
		if (horizontalgroupItemProvider == null) {
			horizontalgroupItemProvider = new HorizontalgroupItemProvider(this);
		}

		return horizontalgroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Loadbalancer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LoadbalancerItemProvider loadbalancerItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Loadbalancer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLoadbalancerAdapter() {
		if (loadbalancerItemProvider == null) {
			loadbalancerItemProvider = new LoadbalancerItemProvider(this);
		}

		return loadbalancerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Horizontalelasticcontroller} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HorizontalelasticcontrollerItemProvider horizontalelasticcontrollerItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Horizontalelasticcontroller}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHorizontalelasticcontrollerAdapter() {
		if (horizontalelasticcontrollerItemProvider == null) {
			horizontalelasticcontrollerItemProvider = new HorizontalelasticcontrollerItemProvider(this);
		}

		return horizontalelasticcontrollerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Instancegrouplink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstancegrouplinkItemProvider instancegrouplinkItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Instancegrouplink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstancegrouplinkAdapter() {
		if (instancegrouplinkItemProvider == null) {
			instancegrouplinkItemProvider = new InstancegrouplinkItemProvider(this);
		}

		return instancegrouplinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Linkbalancer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkbalancerItemProvider linkbalancerItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Linkbalancer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkbalancerAdapter() {
		if (linkbalancerItemProvider == null) {
			linkbalancerItemProvider = new LinkbalancerItemProvider(this);
		}

		return linkbalancerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Grouplink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GrouplinkItemProvider grouplinkItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Grouplink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGrouplinkAdapter() {
		if (grouplinkItemProvider == null) {
			grouplinkItemProvider = new GrouplinkItemProvider(this);
		}

		return grouplinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Manual} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ManualItemProvider manualItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Manual}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createManualAdapter() {
		if (manualItemProvider == null) {
			manualItemProvider = new ManualItemProvider(this);
		}

		return manualItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Dynamic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DynamicItemProvider dynamicItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Dynamic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDynamicAdapter() {
		if (dynamicItemProvider == null) {
			dynamicItemProvider = new DynamicItemProvider(this);
		}

		return dynamicItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Simpledynamic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpledynamicItemProvider simpledynamicItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Simpledynamic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpledynamicAdapter() {
		if (simpledynamicItemProvider == null) {
			simpledynamicItemProvider = new SimpledynamicItemProvider(this);
		}

		return simpledynamicItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Stepdynamic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StepdynamicItemProvider stepdynamicItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Stepdynamic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStepdynamicAdapter() {
		if (stepdynamicItemProvider == null) {
			stepdynamicItemProvider = new StepdynamicItemProvider(this);
		}

		return stepdynamicItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Dynamicadjustment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DynamicadjustmentItemProvider dynamicadjustmentItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Dynamicadjustment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDynamicadjustmentAdapter() {
		if (dynamicadjustmentItemProvider == null) {
			dynamicadjustmentItemProvider = new DynamicadjustmentItemProvider(this);
		}

		return dynamicadjustmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Rule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleItemProvider ruleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Rule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleAdapter() {
		if (ruleItemProvider == null) {
			ruleItemProvider = new RuleItemProvider(this);
		}

		return ruleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Actiontrigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActiontriggerItemProvider actiontriggerItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Actiontrigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActiontriggerAdapter() {
		if (actiontriggerItemProvider == null) {
			actiontriggerItemProvider = new ActiontriggerItemProvider(this);
		}

		return actiontriggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Dynamicpolicy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DynamicpolicyItemProvider dynamicpolicyItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Dynamicpolicy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDynamicpolicyAdapter() {
		if (dynamicpolicyItemProvider == null) {
			dynamicpolicyItemProvider = new DynamicpolicyItemProvider(this);
		}

		return dynamicpolicyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Step} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StepItemProvider stepItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Step}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStepAdapter() {
		if (stepItemProvider == null) {
			stepItemProvider = new StepItemProvider(this);
		}

		return stepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Steplink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SteplinkItemProvider steplinkItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Steplink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSteplinkAdapter() {
		if (steplinkItemProvider == null) {
			steplinkItemProvider = new SteplinkItemProvider(this);
		}

		return steplinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Creation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreationItemProvider creationItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Creation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreationAdapter() {
		if (creationItemProvider == null) {
			creationItemProvider = new CreationItemProvider(this);
		}

		return creationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Scheduler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SchedulerItemProvider schedulerItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Scheduler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSchedulerAdapter() {
		if (schedulerItemProvider == null) {
			schedulerItemProvider = new SchedulerItemProvider(this);
		}

		return schedulerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Uniqueschedule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UniquescheduleItemProvider uniquescheduleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Uniqueschedule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUniquescheduleAdapter() {
		if (uniquescheduleItemProvider == null) {
			uniquescheduleItemProvider = new UniquescheduleItemProvider(this);
		}

		return uniquescheduleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Recurringschedule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RecurringscheduleItemProvider recurringscheduleItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.cmf.occi.multicloud.horizontalelasticity.Recurringschedule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRecurringscheduleAdapter() {
		if (recurringscheduleItemProvider == null) {
			recurringscheduleItemProvider = new RecurringscheduleItemProvider(this);
		}

		return recurringscheduleItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (recurrenceStepItemProvider != null) recurrenceStepItemProvider.dispose();
		if (arrayItemProvider != null) arrayItemProvider.dispose();
		if (arrofRecStepItemProvider != null) arrofRecStepItemProvider.dispose();
		if (horizontalgroupItemProvider != null) horizontalgroupItemProvider.dispose();
		if (loadbalancerItemProvider != null) loadbalancerItemProvider.dispose();
		if (horizontalelasticcontrollerItemProvider != null) horizontalelasticcontrollerItemProvider.dispose();
		if (instancegrouplinkItemProvider != null) instancegrouplinkItemProvider.dispose();
		if (linkbalancerItemProvider != null) linkbalancerItemProvider.dispose();
		if (grouplinkItemProvider != null) grouplinkItemProvider.dispose();
		if (manualItemProvider != null) manualItemProvider.dispose();
		if (dynamicItemProvider != null) dynamicItemProvider.dispose();
		if (simpledynamicItemProvider != null) simpledynamicItemProvider.dispose();
		if (stepdynamicItemProvider != null) stepdynamicItemProvider.dispose();
		if (dynamicadjustmentItemProvider != null) dynamicadjustmentItemProvider.dispose();
		if (ruleItemProvider != null) ruleItemProvider.dispose();
		if (actiontriggerItemProvider != null) actiontriggerItemProvider.dispose();
		if (dynamicpolicyItemProvider != null) dynamicpolicyItemProvider.dispose();
		if (stepItemProvider != null) stepItemProvider.dispose();
		if (steplinkItemProvider != null) steplinkItemProvider.dispose();
		if (creationItemProvider != null) creationItemProvider.dispose();
		if (schedulerItemProvider != null) schedulerItemProvider.dispose();
		if (uniquescheduleItemProvider != null) uniquescheduleItemProvider.dispose();
		if (recurringscheduleItemProvider != null) recurringscheduleItemProvider.dispose();
	}

}
